<?php

declare(strict_types=1);

namespace PeskyORM\ORM\TableStructure\TableColumn\Column;

use PeskyORM\DbExpr;
use PeskyORM\ORM\TableStructure\TableColumn\ColumnValueValidationMessages\ColumnValueValidationMessagesInterface;
use PeskyORM\ORM\TableStructure\TableColumn\TableColumnAbstract;
use PeskyORM\ORM\TableStructure\TableColumn\TableColumnDataType;
use PeskyORM\Utils\ArgumentValidators;
use PeskyORM\Utils\ValueTypeValidators;

class IdColumn extends TableColumnAbstract
{
    public function __construct(string $name = 'id')
    {
        parent::__construct($name);
    }

    public function getDataType(): string
    {
        return TableColumnDataType::INT;
    }

    public function isPrimaryKey(): bool
    {
        return true;
    }

    protected function shouldConvertEmptyStringToNull(): bool
    {
        return true;
    }

    protected function validateNormalizedValue(mixed $normalizedValue, bool $isFromDb, bool $isForCondition): array
    {
        if (is_object($normalizedValue) && !($normalizedValue instanceof DbExpr)) {
            // PK value can be an object only if it is DbExpr instacne
            throw new \UnexpectedValueException(
                "Value for primary key column {$this->getNameForException()} can be an integer"
                . " or instance of " . DbExpr::class . '. '
                . ArgumentValidators::getValueInfoForException($normalizedValue)
            );
        }
        return parent::validateNormalizedValue($normalizedValue, $isFromDb, $isForCondition); // TODO: Change the autogenerated stub
    }

    protected function validateValueDataType(mixed $normalizedValue, bool $isForCondition): array
    {
        if (!ValueTypeValidators::isInteger($normalizedValue)) {
            return [
                $this->getValueValidationMessage(
                    ColumnValueValidationMessagesInterface::VALUE_MUST_BE_INTEGER
                )
            ];
        }
        return [];
    }

    protected function normalizeValidatedValueType(mixed $validatedValue): int
    {
        return (int)$validatedValue;
    }
}