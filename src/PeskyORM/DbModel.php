<?php

namespace PeskyORM;
use http\Exception\UnexpectedValueException;
use PeskyORM\ORM\OrmSelect;
use PeskyORM\ORM\Table;
use Swayok\Utils\StringUtils;

/**
 * Class Model
 */
abstract class DbModel extends Table {

    /** @var DbModel[] */
    static protected $loadedModels = [];    //< Model objects

    const ORDER_ASCENDING = 'ASC';
    const ORDER_DESCENDING = 'DESC';

    /** @var DbTableConfig */
    protected $tableConfig;
    /** @var string */
    protected $namespace;
    /** @var string|null */
    protected $orderField = null;
    /** @var string */
    protected $orderDirection = self::ORDER_ASCENDING;

    /**
     * When null - will be autogenerated using model's class name
     * Example: Model class = \App\Model\UserModel, genrated config class name = \App\Model\Config\UserTableConfig
     * @var null|string
     */
    protected $configClass = null;
    protected $configsNamespace;

    static protected $tablesConfigsDirName = 'TableConfig';
    static protected $tableConfigClassSuffix = 'TableConfig';
    static protected $objectsClassesDirName = 'Object';
    static protected $modelClassSuffix = 'Model';

    static public function getModelClassSuffix() {
        /** @var self $calledClass */
        $calledClass = get_called_class();
        return $calledClass::$modelClassSuffix;
    }

    static public function getTableConfigClassSuffix() {
        /** @var self $calledClass */
        $calledClass = get_called_class();
        return $calledClass::$tableConfigClassSuffix;
    }
    
    public function __construct() {
        $this->loadTableConfig();
    }

    /**
     * @return string
     */
    public function getNamespace() {
        return $this->namespace;
    }

    /**
     * @return string
     */
    public function getTableName() {
        return static::getName();
    }

    /**
     * @return DbTableConfig
     */
    public function getTableConfig() {
        return $this->tableConfig;
    }
    
    public static function getStructure() {
        return static::getInstance()->getTableConfig();
    }
    
    public function getTableStructure() {
        return static::getInstance()->getTableConfig();
    }
    
    /**
     * @return bool
     */
    public function hasTableConfig() {
        return !empty($this->tableConfig);
    }

    /**
     * @return DbRelationConfig[]
     */
    public function getTableRealtaions() {
        return $this->getTableConfig()->getRelations();
    }

    /**
     * @param string $alias
     * @return DbRelationConfig
     */
    public function getTableRealtaion($alias) {
        return $this->getTableConfig()->getRelation($alias);
    }

    /**
     * @param string $alias
     * @return bool
     */
    public function hasTableRelation($alias) {
        return $this->getTableConfig()->hasRelation($alias);
    }

    /**
     * @return DbColumnConfig[]
     */
    public function getTableColumns() {
        return $this->getTableConfig()->getColumns();
    }

    /**
     * @param string $colName
     * @return DbColumnConfig
     */
    public function getTableColumn($colName) {
        return $this->getTableConfig()->getColumn($colName);
    }

    /**
     * @param string $colName
     * @return bool
     */
    public function hasTableColumn($colName) {
        return $this->getTableConfig()->hasColumn($colName);
    }

    /**
     * @return string
     */
    public function getTableAlias() {
        return $this->alias;
    }

    /**
     * @param string $alias
     * @return $this
     */
    public function setAlias($alias) {
        $this->alias = $alias;
        return $this;
    }

    /**
     * @param DbTableConfig $tableConfig
     * @return $this
     */
    public function setTableConfig($tableConfig) {
        $this->tableConfig = $tableConfig;
        return $this;
    }

    /**
     * @return null|string
     */
    public function getOrderField() {
        return $this->orderField;
    }

    /**
     * @return string
     */
    public function getOrderDirection() {
        return $this->orderDirection;
    }

    /**
     * Load config class
     * @param string $modelName
     */
    protected function loadTableConfig() {
        $className = get_class($this);
        if (!preg_match('%^(.*?\\\?)([a-zA-Z0-9]+)' . static::getModelClassSuffix() . '$%is', $className, $classNameParts)) {
            throw new \UnexpectedValueException("Invalid Model class name [{$className}]. Required name is like NameSpace\\SomeModel.");
        }
        $this->namespace = $classNameParts[1];
        if (empty($this->configClass)) {
            $this->configClass = $this->getConfigsNamespace() . static::getTableConfigNameByObjectName($classNameParts[2]);
        }
        if (!class_exists($this->configClass)) {
            throw new UnexpectedValueException("Db table config class [{$this->configClass}] not found");
        }
        $this->setTableConfig(call_user_func([$this->configClass, 'getInstance']));
    }

    /**
     * Loads models by class name. Example: Model::User() will create object of class User (or pick existing if already exists)
     * @param $modelOrObjectName - class name or table name (UserTokenModel, UserToken or user_tokens)
     * @param array $objectArgs - used only for DbObjects to pass data array or primary key value
     * @return DbModel|DbObject|$this
     */
    /*static public function __callStatic($modelOrObjectName, $objectArgs = []) {
        $calledClass = get_called_class();
        if (preg_match('%^(.*)' . $calledClass::$modelClassSuffix . '$%s', $modelOrObjectName, $matches)) {
            // model requested
            return call_user_func([$calledClass, 'getModel'], $modelOrObjectName);
        } else {
            // db object requested
            return call_user_func(
                [$calledClass, 'createDbObject'],
                $modelOrObjectName,
                !empty($objectArgs) ? $objectArgs[0] : null,
                !empty($objectArgs) && isset($objectArgs[1]) ? $objectArgs[1] : null
            );
        }
    }*/

    /**
     * Load and return requested Model
     * @param string $modelNameOrObjectName - base class name (UserToken or UserTokenModel or User)
     * @return DbModel
     */
    static public function getModel($modelNameOrObjectName) {
        $calledClass = get_called_class();
        $modelClass = call_user_func([$calledClass, 'getFullModelClassNameByName'], $modelNameOrObjectName);
        return call_user_func([$calledClass, 'getModelByClassName'], $modelClass);
    }

    /**
     * @param string $modelNameOrObjectName - base class name (UserToken or UserTokenModel or User)
     * @return string
     */
    static public function getFullModelClassNameByName($modelNameOrObjectName) {
        $calledClass = get_called_class();
        $modelNameOrObjectName = preg_replace(
            '%' . $calledClass::$modelClassSuffix . '$%i',
            $calledClass::$modelClassSuffix,
            $modelNameOrObjectName
        );
        return call_user_func([$calledClass, 'getModelsNamespace']) . $modelNameOrObjectName;
    }

    /**
     * @param string $modelClass
     * @return $this
     */
    static public function getModelByClassName($modelClass) {
        if (empty(self::$loadedModels[$modelClass])) {
            if (!class_exists($modelClass)) {
                throw new \InvalidArgumentException("Class $modelClass was not found");
            }
            self::$loadedModels[$modelClass] = new $modelClass();
        }
        return self::$loadedModels[$modelClass];
    }

    /**
     * @param string $tableName
     * @return $this
     */
    static public function getModelByTableName($tableName) {
        $modelClass = static::getFullModelClassByTableName($tableName);
        return static::getModelByClassName($modelClass);
    }

    /**
     * Get related model by relation alias
     * @param string $relationAlias
     * @return DbModel
     */
    public function getRelatedModel($relationAlias) {
        if (!$this->hasTableRelation($relationAlias)) {
            throw new \InvalidArgumentException("Unknown relation with alias [$relationAlias]");
        }
        $foreignTable = $this->getTableRealtaion($relationAlias)->getForeignTable();
        $relatedModelClass = static::getFullModelClassByTableName($foreignTable);
        if (!class_exists($relatedModelClass)) {
            throw new \InvalidArgumentException("Related model class [{$relatedModelClass}] not found for relation [{$relationAlias}]");
        }
        return static::getModelByClassName(static::getFullModelClassByTableName($foreignTable));
    }

    /**
     * @param DbRelationConfig $relation
     * @return DbObject
     */
    public function getRelatedObject($relationAlias) {
        return $this->getRelatedModel($relationAlias)->getOwnDbObject();
    }

    /**
     * Convert get_class($this) to db object class name (without namespace)
     * @return string
     */
    public function dbObjectName() {
        return static::dbObjectNameByModelClassName(get_class($this));
    }

    /**
     * Convert get_class($this) to db object class name (without namespace)
     * @param string $class - class name. Must end on 'Model'
     * @return string
     */
    static public function dbObjectNameByModelClassName($class) {
        $calledClass = get_called_class();
        return preg_replace(
            [
                '%^.*[\\\]%is',
                '%' . $calledClass::$modelClassSuffix . '$%',
                '%^' . preg_quote(addslashes(call_user_func([$calledClass, 'getModelsNamespace'])), '%') . '/%'
            ],
            [
                '',
                '',
                call_user_func([$calledClass, 'getObjectsNamespace']) . '/'
            ],
            $class
        );
    }

    /**
     * Load DbObject class and create new instance of it
     * @param string $dbObjectNameOrTableName - class name or table name (UserToken or user_tokens)
     * @param null|array|string|int $data - null: do nothing | int and string: is primary key (read db) | array: object data
     * @param bool $filter - used only when $data not empty and is array
     *      true: filters $data that does not belong to this object
     *      false: $data that does not belong to this object will trigger exceptions
     * @param bool $isDbValues
     * @return DbObject
     */
    static public function createDbObject($dbObjectNameOrTableName, $data = null, $filter = false, $isDbValues = false) {
        $dbObjectClass = static::getFullDbObjectClass($dbObjectNameOrTableName);
        if (!class_exists($dbObjectClass)) {
            throw new \InvalidArgumentException("Class $dbObjectClass was not found");
        }
        $model = static::getModel(StringUtils::modelize($dbObjectNameOrTableName));
        return new $dbObjectClass($data, $filter, $isDbValues, $model);
    }

    /**
     * Get DbObject class with name space
     * @param string $dbObjectNameOrTableName - object class or db table name.
     * @return string
     */
    static public function getFullDbObjectClass($dbObjectNameOrTableName) {
        return call_user_func([get_called_class(), 'getObjectsNamespace']) . StringUtils::modelize($dbObjectNameOrTableName);
    }

    static public function getModelsNamespace() {
        return preg_replace('%[a-zA-Z0-9_]+$%', '', get_called_class());
    }

    static public function getObjectsNamespace() {
        /** @var self $calledClass */
        $calledClass = get_called_class();
        return preg_replace(
            '%[a-zA-Z0-9_]+\\\$%',
            $calledClass::$objectsClassesDirName . '\\',
            call_user_func([$calledClass, 'getModelsNamespace'])
        );
    }

    protected function getConfigsNamespace() {
        if (empty($this->configsNamespace)) {
            $this->configsNamespace = preg_replace('%^(.*)\\\.+?$%s', '$1', $this->namespace) . '\\' . $this::$tablesConfigsDirName .'\\';
        }
        return $this->configsNamespace;
    }

    static public function getFullModelClassByTableName($tableName) {
        $calledClass = get_called_class();
        $ns = call_user_func([$calledClass, 'getModelsNamespace']);
        return $ns . call_user_func([$calledClass, 'getModelNameByTableName'], $tableName);
    }

    static public function getModelNameByTableName($tableName) {
        $calledClass = get_called_class();
        return call_user_func([$calledClass, 'getObjectNameByTableName'], $tableName) . $calledClass::$modelClassSuffix;
    }

    static public function getObjectNameByTableName($tableName) {
        return StringUtils::modelize($tableName);
    }

    static public function getTableConfigNameByObjectName($objectName) {
        /** @var DbModel $calledClass */
        $calledClass = get_called_class();
        return $objectName . $calledClass::getTableConfigClassSuffix();
    }

    static public function getTableConfigNameByTableName($tableName) {
        $calledClass = get_called_class();
        return call_user_func(
            [$calledClass, 'getTableConfigNameByObjectName'],
            call_user_func([$calledClass, 'getObjectNameByTableName'], $tableName)
        );
    }

    /**
     * @param $objectClass
     * @return DbModel
     */
    static public function getModelByObjectClass($objectClass) {
        return call_user_func([get_called_class(), 'getModel'], preg_replace('%^.*\\\%', '', $objectClass));
    }

    /**
     * Load DbObject for current model and create new instance of it
     * @param null|array|string|int $data - null: do nothing | int and string: is primary key (read db) | array: object data
     * @param bool $filter - used only when $data not empty and is array
     *      true: filters $data that does not belong to this object
     *      false: $data that does not belong to this object will trigger exceptions
     * @param bool $isDbValues
     * @return DbObject
     */
    static public function getOwnDbObject($data = null, $filter = false, $isDbValues = false) {
        return static::createDbObject(
            static::dbObjectNameByModelClassName(get_called_class()),
            $data,
            $filter,
            $isDbValues
        );
    }
    
    /**
     * @return DbObject
     */
    public function newRecord() {
        return static::getOwnDbObject();
    }

    /**
     * Collect real DB fields excluding virtual fields like files and images
     * @return array
     */
    public function getDbFields() {
        $ret = [];
        foreach ($this->getTableColumns() as $name => $column) {
            if ($column->isExistsInDb()) {
                $ret[] = $name;
            }
        }
        return $ret;
    }

    /**
     * Convert records to DbObjects
     * @param array $records
     * @param bool $dataIsLoadedFromDb
     * @return array
     */
    public function recordsToObjects($records, $dataIsLoadedFromDb = false) {
        if (is_array($records) && !empty($records)) {
            $objects = [];
            foreach ($records as $record) {
                if ($dataIsLoadedFromDb) {
                    $objects[] = static::getOwnDbObject($record, false, true);
                } else {
                    $objects[] = static::getOwnDbObject($record);
                }
            }
            return $objects;
        }
        return $records;
    }

    /**
     * Build valid 'JOIN' settings from 'CONTAIN' table aliases
     * @param array $where
     * @param string|null $aliasForSubContains
     * @return array $where
     */
    public function resolveContains(array $where, $aliasForSubContains = null) {
        if (!empty($where['CONTAIN'])) {
            if (!is_array($where['CONTAIN'])) {
                $where['CONTAIN'] = [$where['CONTAIN']];
            }
            if (empty($where['JOIN']) || !is_array($where['JOIN'])) {
                $where['JOIN'] = [];
            }

            foreach ($where['CONTAIN'] as $alias => $fields) {
                if (is_int($alias)) {
                    $alias = $fields;
                    $fields = !empty($relation['fields']) ? $relation['fields'] : '*';
                }
                $relationConfig = $this->getTableRealtaion($alias);
                if ($relationConfig->getType() === DbRelationConfig::HAS_MANY) {
                    throw new \UnexpectedValueException("Queries with one-to-many joins are not allowed via 'CONTAIN' key");
                } else {
                    $model = $this->getRelatedModel($alias);
                    $joinType = $relationConfig->getJoinType();
                    if (is_array($fields)) {
                        if (isset($fields['TYPE'])) {
                            $joinType = $fields['TYPE'];
                        }
                        unset($fields['TYPE']);
                        if (isset($fields['CONDITIONS'])) {
                            throw new \UnexpectedValueException('CONDITIONS key is not supported in CONTAIN');
                        }
                        unset($fields['CONDITIONS']);
                        if (!empty($fields['CONTAIN'])) {
                            $subContains = $fields['CONTAIN'];
                        }
                        unset($fields['CONTAIN']);
                        if (empty($fields)) {
                            $fields = '*';
                        }
                    }

                    $where['JOIN'][$alias] = $relationConfig->toOrmJoinConfig($this, $aliasForSubContains, $alias);

                    if (!empty($subContains)) {
                        $subJoins = $model->resolveContains(['CONTAIN' => $subContains], $alias);
                        $where['JOIN'] = array_merge($where['JOIN'], $subJoins['JOIN']);
                    }
                }
            }
            if (empty($where['JOIN'])) {
                unset($where['JOIN']);
            }
        }
        unset($where['CONTAIN']);
        return $where;
    }

    /**
     * Add columns into options and resolve contains
     * @param mixed $columns
     * @param array $options
     * @return array
     */
    protected function prepareSelect($columns, array $options): array {
        $options = $this->resolveContains($options);
        if (!empty($columns)) {
            $options['FIELDS'] = $columns;
        }
        return $options;
    }

    /* Queries */

    /**
     * Create query builder
     * @return OrmSelect
     */
    public function builder() {
        // todo: refactor usages
        return new OrmSelect($this);
    }

    static public function select($columns = '*', $conditionsAndOptions = null, $asObjects = false, $withRootAlias = false) {
        // todo: resolve options in $conditionsAndOptions?
        $records = parent::select($columns, $conditionsAndOptions, null);
        return $asObjects ? $records : $records->toArrays();
    }

    static public function selectColumn($column, array $conditionsAndOptions = [], \Closure $configurator = null) {
        // todo: resolve options in $conditionsAndOptions?
        return parent::selectColumn($column, $conditionsAndOptions);
    }

    static public function selectAssoc($keysColumn, $valuesColumn, array $conditionsAndOptions = [], \Closure $configurator = null) {
        // todo: resolve options in $conditionsAndOptions?
        return parent::selectAssoc($keysColumn, $valuesColumn, $conditionsAndOptions);
    }

    /**
     * Runs Select query with count
     * @param string $columns
     * @param null|array $conditionsAndOptions
     * @param bool $asObjects - true: return DbObject | false: return array
     * @return array - 'count' => int, 'records' => array)
     */
    public function selectWithCount($columns, array $conditionsAndOptions = [], $asObjects = false) {
        $conditionsAndOptions = $this->prepareSelect($columns, $conditionsAndOptions);
        $count = $this->count($conditionsAndOptions);
        if (empty($count)) {
            return ['records' => [], 'count' => 0];
        }
        $results = [
            'records' => static::select($columns, $conditionsAndOptions),
            'count' => $count
        ];
        if ($asObjects) {
            $results['records'] = $this->recordsToObjects($results['records']);
        }
        return $results;
    }

    /**
     * Get 1 record from DB
     * @param string|array $columns
     * @param array|string|int $conditionsAndOptions -
     *      array: conditions,
     *      numeric|int: record's pk value, automatically converted to [$this->primaryKey => $where]
     * @param bool $asObject - true: return DbObject | false: return array
     * @param bool $withRootAlias
     * @return array|bool|DbObject
     */
    static public function selectOne($columns, array $conditionsAndOptions, $asObject = false, $withRootAlias = false) {
        // todo: resolve options in $conditionsAndOptions?
        return parent::selectOne($columns, $conditionsAndOptions);
    }

    /**
     * Make a query that returns only 1 value defined by $expression
     * @param string|\PeskyORM\Core\DbExpr $expression - example: 'COUNT(*)', 'SUM(`field`)'
     * @param array $conditionsAndOptions
     * @return string|int|float|bool
     */
    static public function expression($expression, array $conditionsAndOptions = []) {
        if (($expression instanceof \PeskyORM\Core\DbExpr)) {
            $expression = new \PeskyORM\Core\DbExpr($expression);
        }
        // todo: maybe use $this->resolveContains($conditionsAndOptions)
        return static::selectValue($expression, $conditionsAndOptions);
    }

    static public function exists($conditionsAndOptions) {
        $conditionsAndOptions['LIMIT'] = 1;
        return (int)static::expression('1', $conditionsAndOptions) === 1;
    }
    
    static public function count(array $conditions = [], \Closure $configurator = null, $removeNotInnerJoins = false) {
        // todo: fix old args list usage: static public function count($conditionsAndOptions = null, $removeNotInnerJoins = false) {
        return parent::count($conditions, $configurator, $removeNotInnerJoins);
    }

    static public function sum($column, $conditionsAndOptions = null) {
        return 0 + static::expression("SUM(`$column`)", $conditionsAndOptions);
    }
    
    static public function max($column, $conditionsAndOptions = null) {
        return 0 + static::expression("MAX(`$column`)", $conditionsAndOptions);
    }
    
    static public function min($column, $conditionsAndOptions = null) {
        return 0 + static::expression("MIN(`$column`)", $conditionsAndOptions);
    }
    
    static public function avg($column, $conditionsAndOptions = null) {
        return 0 + static::expression("AVG(`$column`)", $conditionsAndOptions);
    }
    
    static public function begin($readOnly = false, $transactionType = null) {
        static::getConnection()->begin($readOnly, $transactionType);
    }
    
    static public function commit() {
        static::getConnection()->commit();
    }

    static public function rollback() {
        static::getConnection()->rollback();
    }

}
