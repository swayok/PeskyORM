<?php

namespace App\Db;

use PeskyORM\Tests\PeskyORMTest\TestingAdmins\TestingAdminsTableStructure;
use PeskyORM\ORM\TableStructure\TableColumn\TableColumnInterface;
use PeskyORM\ORM\TableStructure\Relation;
use PeskyORM\DbExpr;
use PeskyORM\Tests\PeskyORMTest\Traits\TestingIdColumnTrait;
use PeskyORM\Tests\PeskyORMTest\Traits\TestingTimestampColumnsTrait;

/**
 * @property-read TableColumn    $id
 * @property-read TableColumn    $login
 * @property-read TableColumn    $password
 * @property-read TableColumn    $parent_id
 * @property-read TableColumn    $created_at
 * @property-read TableColumn    $updated_at
 * @property-read TableColumn    $remember_token
 * @property-read TableColumn    $is_superadmin
 * @property-read TableColumn    $language
 * @property-read TableColumn    $ip
 * @property-read TableColumn    $role
 * @property-read TableColumn    $is_active
 * @property-read TableColumn    $name
 * @property-read TableColumn    $email
 * @property-read TableColumn    $timezone
 * @property-read TableColumn    $not_changeable_column
 * @property-read TableColumn    $big_data
 */
class AdminsTableStructure extends TestingAdminsTableStructure
{

    use TestingIdColumnTrait,
        TestingTimestampColumnsTrait;

    public static function getTableName(): string
    {
        return 'admins';
    }

    private function login(): TableColumnInterface
    {
        return TableColumn::create(TableColumn::TYPE_STRING)
            ->uniqueValues()
            ->disallowsNullValues()
            ->convertsEmptyStringToNull();
    }

    private function password(): TableColumnInterface
    {
        return TableColumn::create(TableColumn::TYPE_STRING)
            ->disallowsNullValues()
            ->convertsEmptyStringToNull();
    }

    private function parent_id(): TableColumnInterface
    {
        return TableColumn::create(TableColumn::TYPE_INT);
    }

    private function remember_token(): TableColumnInterface
    {
        return TableColumn::create(TableColumn::TYPE_STRING)
            ->setDefaultValue('');
    }

    private function is_superadmin(): TableColumnInterface
    {
        return TableColumn::create(TableColumn::TYPE_BOOL)
            ->disallowsNullValues()
            ->convertsEmptyStringToNull()
            ->setDefaultValue(false);
    }

    private function language(): TableColumnInterface
    {
        return TableColumn::create(TableColumn::TYPE_STRING)
            ->setDefaultValue('en');
    }

    private function ip(): TableColumnInterface
    {
        return TableColumn::create(TableColumn::TYPE_STRING)
            ->setDefaultValue('192.168.1.1');
    }

    private function role(): TableColumnInterface
    {
        return TableColumn::create(TableColumn::TYPE_STRING)
            ->disallowsNullValues()
            ->convertsEmptyStringToNull()
            ->setDefaultValue('');
    }

    private function is_active(): TableColumnInterface
    {
        return TableColumn::create(TableColumn::TYPE_BOOL)
            ->disallowsNullValues()
            ->convertsEmptyStringToNull()
            ->setDefaultValue(true);
    }

    private function name(): TableColumnInterface
    {
        return TableColumn::create(TableColumn::TYPE_STRING)
            ->disallowsNullValues()
            ->convertsEmptyStringToNull()
            ->setDefaultValue('');
    }

    private function email(): TableColumnInterface
    {
        return TableColumn::create(TableColumn::TYPE_STRING)
            ->uniqueValues();
    }

    private function timezone(): TableColumnInterface
    {
        return TableColumn::create(TableColumn::TYPE_STRING)
            ->disallowsNullValues()
            ->convertsEmptyStringToNull()
            ->setDefaultValue('UTC');
    }

    private function not_changeable_column(): TableColumnInterface
    {
        return TableColumn::create(TableColumn::TYPE_STRING)
            ->setDefaultValue('not changable');
    }

    private function big_data(): TableColumnInterface
    {
        return TableColumn::create(TableColumn::TYPE_TEXT)
            ->disallowsNullValues()
            ->convertsEmptyStringToNull()
            ->setDefaultValue('biiiiiiig data');
    }

}